'''
inorder preorder 
'''
import networkx as nx
import matplotlib.pyplot as plt
from networkx.drawing.nx_pydot import graphviz_layout

class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def build_tree(preorder, inorder):
    if not preorder or not inorder:
        return None

    root_value = preorder[0]
    root = TreeNode(root_value)

    root_index_inorder = inorder.index(root_value)
    
    root.left = build_tree(preorder[1:1+root_index_inorder], inorder[:root_index_inorder])
    root.right = build_tree(preorder[1+root_index_inorder:], inorder[root_index_inorder+1:])

    return root

def visualize_tree(G, node, pos, level=1, width=2, vert_gap = 0.4, xcenter = 1 ):
    if node:
        G.add_node(node.value)
        if node.left:
            G.add_edge(node.value, node.left.value)
            l = xcenter - width/2 - (level-1)*width*2
            pos[node.left.value] = (l, 1 - level*vert_gap)
            visualize_tree(G, node.left, pos=pos, level=level+1, width=width/2, vert_gap=vert_gap, xcenter=1)
        if node.right:
            G.add_edge(node.value, node.right.value)
            r = xcenter + width/2 + (level-1)*width*2
            pos[node.right.value] = (r, 1 - level*vert_gap)
            visualize_tree(G, node.right, pos=pos, level=level+1, width=width/2, vert_gap=vert_gap, xcenter=r)

# Given traversals
preorder_traversal = ['a', 'b', 'd', 'e', 'c', 'f', 'g']
inorder_traversal = ['d', 'b', 'e', 'a', 'f', 'c', 'g']

# Build the binary tree
root_node = build_tree(preorder_traversal, inorder_traversal)

# Visualize the constructed binary tree using networkx
G = nx.DiGraph()
pos = {root_node.value: (0.5, 1.0)}
visualize_tree(G, root_node, pos=pos)

# Draw the graph
nx.draw(G, pos, with_labels=True, node_size=700, node_color="skyblue", font_size=10, font_color="black", font_weight="bold", arrowsize=20)
plt.show()
